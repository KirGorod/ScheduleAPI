{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kirill\\\\Documents\\\\Dev\\\\appointment\\\\frontend\\\\src\\\\components\\\\ListWorkers.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport ListWorker from './components/ListWorker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListWorkers = () => {\n  _s();\n\n  let [workers, setWorkers] = useState([]);\n  useEffect(() => {\n    getWorkers();\n  }, []);\n\n  let getWorkers = async () => {\n    let response = await fetch(\"http://127.0.0.1:8000/api/workers/\");\n    let data = await response.json();\n    console.log(\"data: \", data);\n    setWorkers(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: workers.map((worker, index) => /*#__PURE__*/_jsxDEV(ListWorker, {\n      worker: worker\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListWorkers, \"8dWHyGGFKocIZErNAr5f9LEm3Qc=\");\n\n_c = ListWorkers;\nexport default ListWorkers;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListWorkers\");","map":{"version":3,"names":["React","useState","useEffect","ListWorker","ListWorkers","workers","setWorkers","getWorkers","response","fetch","data","json","console","log","map","worker","index"],"sources":["C:/Users/Kirill/Documents/Dev/appointment/frontend/src/components/ListWorkers.jsx"],"sourcesContent":["import React from 'react'\r\nimport {useState, useEffect} from 'react'\r\nimport ListWorker from './components/ListWorker'\r\n\r\nconst ListWorkers = () => {\r\n  let [workers, setWorkers]=useState([]);\r\n\r\n  useEffect(() => {\r\n    getWorkers()\r\n  }, [])\r\n\r\n  let getWorkers = async () => {\r\n    let response = await fetch(\"http://127.0.0.1:8000/api/workers/\")\r\n    let data = await response.json()\r\n    console.log(\"data: \", data)\r\n    setWorkers(data)\r\n  } \r\n\r\n\r\n  return (\r\n    <div className='row'>\r\n      {workers.map((worker, index) => (\r\n          <ListWorker key={index} worker={worker} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListWorkers"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,IAAI,CAACC,OAAD,EAAUC,UAAV,IAAsBL,QAAQ,CAAC,EAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACdK,UAAU;EACX,CAFQ,EAEN,EAFM,CAAT;;EAIA,IAAIA,UAAU,GAAG,YAAY;IAC3B,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,CAA1B;IACA,IAAIC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;IACAC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,IAAtB;IACAJ,UAAU,CAACI,IAAD,CAAV;EACD,CALD;;EAQA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,UACGL,OAAO,CAACS,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,kBACT,QAAC,UAAD;MAAwB,MAAM,EAAED;IAAhC,GAAiBC,KAAjB;MAAA;MAAA;MAAA;IAAA,QADH;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CAtBD;;GAAMZ,W;;KAAAA,W;AAwBN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}